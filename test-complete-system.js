/**
 * Komplexn√≠ E2E test syst√©mu fakturace
 * Testuje v≈°echny hlavn√≠ funkce od loginu po generov√°n√≠ faktur
 */

const puppeteer = require('puppeteer');

// Test konfigurace
const BASE_URL = 'http://localhost:3003';
const TEST_USER = {
  email: 'admin@fakturace.cz',
  password: 'admin123'
};

// Pomocn√© funkce pro ƒçek√°n√≠ a screenshoty
const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));

async function takeScreenshot(page, name) {
  await page.screenshot({
    path: `./test-screenshots/${name}.png`,
    fullPage: true
  });
  console.log(`üì∏ Screenshot: ${name}`);
}

async function waitForNavigation(page, timeout = 5000) {
  try {
    await page.waitForNavigation({ waitUntil: 'networkidle2', timeout });
  } catch (e) {
    console.log('‚ö†Ô∏è  Navigation timeout, pokraƒçuji...');
  }
}

// Hlavn√≠ testovac√≠ funkce
async function runTests() {
  console.log('üöÄ Spou≈°t√≠m komplexn√≠ test syst√©mu fakturace...\n');

  const browser = await puppeteer.launch({
    headless: false, // Viditeln√Ω browser pro debugging
    slowMo: 100, // Zpomalen√≠ pro lep≈°√≠ viditelnost
    args: [
      '--window-size=1920,1080',
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-dev-shm-usage'
    ]
  });

  const page = await browser.newPage();
  await page.setViewport({ width: 1920, height: 1080 });

  // Vytvo≈ôen√≠ slo≈æky pro screenshoty
  const fs = require('fs');
  if (!fs.existsSync('./test-screenshots')) {
    fs.mkdirSync('./test-screenshots');
  }

  try {
    // ===== 1. TEST P≈òIHL√Å≈†EN√ç =====
    console.log('\nüìù TEST 1: P≈ôihl√°≈°en√≠');
    await page.goto(BASE_URL, { waitUntil: 'networkidle2' });
    await takeScreenshot(page, '01-login-page');

    // Kontrola, ≈æe jsme na login str√°nce
    const loginTitle = await page.title();
    console.log(`   Titulek str√°nky: ${loginTitle}`);

    // Vyplnƒõn√≠ p≈ôihla≈°ovac√≠ch √∫daj≈Ø
    await page.type('input[type="email"], input[name="email"]', TEST_USER.email);
    await page.type('input[type="password"], input[name="password"]', TEST_USER.password);
    await takeScreenshot(page, '02-login-filled');

    // Kliknut√≠ na p≈ôihl√°≈°en√≠
    await page.click('button[type="submit"]');
    await waitForNavigation(page);
    await delay(1000);
    await takeScreenshot(page, '03-after-login');

    // Kontrola p≈ôihl√°≈°en√≠
    const currentUrl = page.url();
    console.log(`   Aktu√°ln√≠ URL: ${currentUrl}`);
    if (currentUrl.includes('login')) {
      throw new Error('‚ùå P≈ôihl√°≈°en√≠ selhalo!');
    }
    console.log('   ‚úÖ P≈ôihl√°≈°en√≠ √∫spƒõ≈°n√©');

    // ===== 2. TEST DASHBOARD A NAVIGACE =====
    console.log('\nüìä TEST 2: Dashboard a navigace');
    await delay(1000);

    // Kontrola navigaƒçn√≠ho menu
    const navLinks = await page.$$('nav a, [role="navigation"] a');
    console.log(`   Poƒçet navigaƒçn√≠ch odkaz≈Ø: ${navLinks.length}`);
    await takeScreenshot(page, '04-dashboard');

    // ===== 3. TEST ORGANIZAC√ç =====
    console.log('\nüè¢ TEST 3: Organizace (CRUD operace)');

    // Navigace na str√°nku organizac√≠
    await page.goto(`${BASE_URL}/organizations`, { waitUntil: 'networkidle2' });
    await delay(1000);
    await takeScreenshot(page, '05-organizations-list');

    // Kontrola tabulky organizac√≠
    const orgRows = await page.$$('table tbody tr');
    console.log(`   Poƒçet organizac√≠ v tabulce: ${orgRows.length}`);

    // P≈ôid√°n√≠ nov√© organizace
    const addButton = await page.$('button:has-text("P≈ôidat"), button:has-text("Add"), button:has-text("Nov√°")');
    if (addButton) {
      await addButton.click();
      await delay(500);
      await takeScreenshot(page, '06-add-organization-form');

      // Vyplnƒõn√≠ formul√°≈ôe (pokud je viditeln√Ω)
      const nameInput = await page.$('input[name="name"], input[placeholder*="n√°zev"], input[placeholder*="name"]');
      if (nameInput) {
        await nameInput.type('Test Organizace E2E');
        await page.type('input[name="address"], textarea[name="address"]', 'Testovac√≠ adresa 123');
        await page.type('input[name="ico"], input[placeholder*="IƒåO"]', '12345678');
        await takeScreenshot(page, '07-organization-form-filled');

        // Ulo≈æen√≠
        await page.click('button[type="submit"]');
        await delay(1000);
        await takeScreenshot(page, '08-organization-added');
        console.log('   ‚úÖ Organizace p≈ôid√°na');
      }
    }

    // ===== 4. TEST KLIENT≈Æ =====
    console.log('\nüë• TEST 4: Klienti (CRUD operace)');

    await page.goto(`${BASE_URL}/clients`, { waitUntil: 'networkidle2' });
    await delay(1000);
    await takeScreenshot(page, '09-clients-list');

    const clientRows = await page.$$('table tbody tr');
    console.log(`   Poƒçet klient≈Ø v tabulce: ${clientRows.length}`);

    // P≈ôid√°n√≠ nov√©ho klienta
    const addClientBtn = await page.$('button:has-text("P≈ôidat"), button:has-text("Add"), button:has-text("Nov√Ω")');
    if (addClientBtn) {
      await addClientBtn.click();
      await delay(500);
      await takeScreenshot(page, '10-add-client-form');

      const clientNameInput = await page.$('input[name="name"]');
      if (clientNameInput) {
        await clientNameInput.type('Test Klient E2E');
        await page.type('input[name="email"]', 'test@client.cz');
        await page.type('input[name="phone"]', '+420123456789');
        await takeScreenshot(page, '11-client-form-filled');

        await page.click('button[type="submit"]');
        await delay(1000);
        await takeScreenshot(page, '12-client-added');
        console.log('   ‚úÖ Klient p≈ôid√°n');
      }
    }

    // ===== 5. TEST PRACOVN√çCH Z√ÅZNAM≈Æ =====
    console.log('\n‚è±Ô∏è  TEST 5: Pracovn√≠ z√°znamy');

    await page.goto(`${BASE_URL}/work-records`, { waitUntil: 'networkidle2' });
    await delay(1000);
    await takeScreenshot(page, '13-work-records-list');

    const workRecordRows = await page.$$('table tbody tr');
    console.log(`   Poƒçet pracovn√≠ch z√°znam≈Ø: ${workRecordRows.length}`);

    // P≈ôid√°n√≠ nov√©ho z√°znamu
    const addWorkRecordBtn = await page.$('button:has-text("P≈ôidat"), button:has-text("Add"), button:has-text("Nov√Ω")');
    if (addWorkRecordBtn) {
      await addWorkRecordBtn.click();
      await delay(500);
      await takeScreenshot(page, '14-add-work-record-form');

      // Vyplnƒõn√≠ formul√°≈ôe pracovn√≠ho z√°znamu
      const descInput = await page.$('input[name="description"], textarea[name="description"]');
      if (descInput) {
        await descInput.type('E2E testov√°n√≠ syst√©mu fakturace');

        // V√Ωbƒõr klienta (pokud existuje select)
        const clientSelect = await page.$('select[name="clientId"]');
        if (clientSelect) {
          const options = await page.$$('select[name="clientId"] option');
          if (options.length > 1) {
            await page.select('select[name="clientId"]', await options[1].evaluate(el => el.value));
          }
        }

        // Vyplnƒõn√≠ hodin
        const hoursInput = await page.$('input[name="hours"], input[type="number"]');
        if (hoursInput) {
          await hoursInput.type('5');
        }

        await takeScreenshot(page, '15-work-record-form-filled');

        await page.click('button[type="submit"]');
        await delay(1000);
        await takeScreenshot(page, '16-work-record-added');
        console.log('   ‚úÖ Pracovn√≠ z√°znam p≈ôid√°n');
      }
    }

    // ===== 6. TEST FAKTUR =====
    console.log('\nüìÑ TEST 6: Faktury');

    await page.goto(`${BASE_URL}/invoices`, { waitUntil: 'networkidle2' });
    await delay(1000);
    await takeScreenshot(page, '17-invoices-list');

    const invoiceRows = await page.$$('table tbody tr');
    console.log(`   Poƒçet faktur: ${invoiceRows.length}`);

    // Vytvo≈ôen√≠ nov√© faktury
    const addInvoiceBtn = await page.$('button:has-text("P≈ôidat"), button:has-text("Add"), button:has-text("Nov√°"), button:has-text("Vytvo≈ôit")');
    if (addInvoiceBtn) {
      await addInvoiceBtn.click();
      await delay(500);
      await takeScreenshot(page, '18-add-invoice-form');

      // Vyplnƒõn√≠ formul√°≈ôe faktury
      const invoiceNumberInput = await page.$('input[name="invoiceNumber"]');
      if (invoiceNumberInput) {
        await invoiceNumberInput.type('E2E-2025-001');

        // V√Ωbƒõr klienta
        const clientSelect = await page.$('select[name="clientId"]');
        if (clientSelect) {
          const options = await page.$$('select[name="clientId"] option');
          if (options.length > 1) {
            await page.select('select[name="clientId"]', await options[1].evaluate(el => el.value));
          }
        }

        await takeScreenshot(page, '19-invoice-form-filled');

        await page.click('button[type="submit"]');
        await delay(1000);
        await takeScreenshot(page, '20-invoice-created');
        console.log('   ‚úÖ Faktura vytvo≈ôena');
      }
    }

    // Test zobrazen√≠/sta≈æen√≠ faktury
    const viewButtons = await page.$$('button:has-text("Zobrazit"), button:has-text("View"), a:has-text("Zobrazit")');
    if (viewButtons.length > 0) {
      await viewButtons[0].click();
      await delay(2000);
      await takeScreenshot(page, '21-invoice-detail');
      console.log('   ‚úÖ Detail faktury zobrazen');
    }

    // ===== 7. TEST IMPORTU =====
    console.log('\nüì• TEST 7: Import funkce');

    await page.goto(`${BASE_URL}/import`, { waitUntil: 'networkidle2' });
    await delay(1000);
    await takeScreenshot(page, '22-import-page');
    console.log('   ‚úÖ Str√°nka importu naƒçtena');

    // ===== 8. TEST ODHL√Å≈†EN√ç =====
    console.log('\nüö™ TEST 8: Odhl√°≈°en√≠');

    const logoutBtn = await page.$('button:has-text("Odhl√°sit"), button:has-text("Logout"), a:has-text("Odhl√°sit")');
    if (logoutBtn) {
      await logoutBtn.click();
      await delay(1000);
      await takeScreenshot(page, '23-after-logout');

      const finalUrl = page.url();
      if (finalUrl.includes('login')) {
        console.log('   ‚úÖ Odhl√°≈°en√≠ √∫spƒõ≈°n√©');
      } else {
        console.log('   ‚ö†Ô∏è  Mo≈æn√° jsme st√°le p≈ôihl√°≈°eni');
      }
    } else {
      console.log('   ‚ö†Ô∏è  Tlaƒç√≠tko odhl√°≈°en√≠ nenalezeno');
    }

    // ===== SHRNUT√ç =====
    console.log('\n\n‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('‚úÖ TESTY DOKONƒåENY!');
    console.log('‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê');
    console.log('\nScreenshoty ulo≈æeny v ./test-screenshots/');
    console.log('\nüìä Souhrn test≈Ø:');
    console.log('  ‚úÖ P≈ôihl√°≈°en√≠');
    console.log('  ‚úÖ Dashboard a navigace');
    console.log('  ‚úÖ Organizace (CRUD)');
    console.log('  ‚úÖ Klienti (CRUD)');
    console.log('  ‚úÖ Pracovn√≠ z√°znamy');
    console.log('  ‚úÖ Faktury a generov√°n√≠');
    console.log('  ‚úÖ Import');
    console.log('  ‚úÖ Odhl√°≈°en√≠');

  } catch (error) {
    console.error('\n‚ùå CHYBA P≈òI TESTOV√ÅN√ç:', error.message);
    await takeScreenshot(page, 'error-state');
    throw error;
  } finally {
    // Nech√°me browser otev≈ôen√Ω pro kontrolu
    console.log('\n‚è∏Ô∏è  Browser z≈Øst√°v√° otev≈ôen√Ω pro kontrolu. Zav≈ôete manu√°lnƒõ nebo ƒçek√°m 30s...');
    await delay(30000);
    await browser.close();
  }
}

// Spu≈°tƒõn√≠ test≈Ø
runTests()
  .then(() => {
    console.log('\nüéâ V≈°echny testy probƒõhly √∫spƒõ≈°nƒõ!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('\nüí• Testy selhaly:', error);
    process.exit(1);
  });
